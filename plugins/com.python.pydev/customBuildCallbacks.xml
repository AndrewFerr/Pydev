<!-- ===================================================================== -->
<!-- Custom targets called from a project's generated build.xml            -->
<!-- Set customBuildCallbacks=<path/to/this/file> in your build.properties.-->
<!-- ===================================================================== -->
<project name="Build specific targets and properties" default="noDefault">
	<property name="svn.username" value="pydevbuild" />
	<property name="svn.password" value="Ph64rnT" />
	<property name="aptana.svn.base.url" value="http://svn.aptana.local/svn/aptana/aptana/ide_suite/trunk" />
	<property name="aptana.svn.core.url" value="${aptana.svn.base.url}/ide_core" />
	<property name="aptana.svn.pro.url" value="${aptana.svn.base.url}/ide_pro" />
	<path id="svn.classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svn.classpath" />

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="This file must be called with explicit targets" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.jars                              -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.jars                               -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.jars">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target build.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="pre.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target build.sources                            -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder to contain the build results           -->
	<!-- ===================================================================== -->
	<target name="post.build.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the compilation target <name>                      -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="pre.name">
	</target>

	<target name="pre.pydev.jar">
		<mkdir dir="src/com/aptana/ide/core/licensing" />
		<mkdir dir="src/com/aptana/ide/core/ui/preferences" />
		<mkdir dir="src/com/aptana/ide/professional/licensing" />
		<!-- We need to export it: checkout cannot get a single file -->
		<svn username="${svn.username}" password="${svn.password}" svnkit="true">
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core/src/com/aptana/ide/core/licensing/ClientKey.java" destPath="src/com/aptana/ide/core/licensing/ClientKey.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core/src/com/aptana/ide/core/licensing/ILicenseKey.java" destPath="src/com/aptana/ide/core/licensing/ILicenseKey.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core/src/com/aptana/ide/core/licensing/LicenseKeyService.java" destPath="src/com/aptana/ide/core/licensing/LicenseKeyService.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core/src/com/aptana/ide/core/licensing/ILicenseContributor.java" destPath="src/com/aptana/ide/core/licensing/ILicenseContributor.java" />
            <export srcUrl="${aptana.svn.pro.url}/plugins/com.aptana.ide.professional.licensing/src/com/aptana/ide/professional/licensing/LicensingUtilities.java" destPath="src/com/aptana/ide/professional/licensing/LicensingUtilities.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core/src/com/aptana/ide/core/URLEncoder.java" destPath="src/com/aptana/ide/core/URLEncoder.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/ApplicationPreferences.java" destPath="src/com/aptana/ide/core/ui/preferences/ApplicationPreferences.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/Messages.java" destPath="src/com/aptana/ide/core/ui/preferences/Messages.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/messages.properties" destPath="src/com/aptana/ide/core/ui/preferences/messages.properties" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" destPath="src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" />
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.libraries/trialkey.jar" destPath="lib/trialkey.jar" />
		</svn>
		
		<!-- Replace needed things to compile -->
		<replace file="src/com/aptana/ide/core/licensing/ILicenseContributor.java" token="public LicenseKeyWidget createKeyComposite(Composite parent);" value="//public LicenseKeyWidget createKeyComposite(Composite parent);"/>
        <replace file="src/com/aptana/ide/core/licensing/LicenseKeyService.java" token="import com.aptana.ide.core.AptanaCorePlugin;" value="//import com.aptana.ide.core.AptanaCorePlugin;"/>
        <replace file="src/com/aptana/ide/core/licensing/LicenseKeyService.java" token="import com.aptana.ide.core.IdeLog;" value="//import com.aptana.ide.core.IdeLog;"/>
        <replace file="src/com/aptana/ide/core/licensing/LicenseKeyService.java" token="IdeLog.logError(AptanaCorePlugin.getDefault()," value="org.python.pydev.core.log.Log.log("/>
        
        <replace file="src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" token="String SWITCH_TO_APTANA_PRESPECTIVE" value="//String SWITCH_TO_APTANA_PRESPECTIVE"/>
        <replace file="src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" token="import com.aptana.ide.core.ui.PerspectiveManager" value="//import com.aptana.ide.core.ui.PerspectiveManager"/>
        <replace file="src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" token="import com.aptana.ide.core.ui.WebPerspectiveFactory" value="//import com.aptana.ide.core.ui.WebPerspectiveFactory"/>
        <replace file="src/com/aptana/ide/core/ui/preferences/ApplicationPreferences.java" token="import com.aptana.ide.core.StringUtils" value="import org.python.pydev.core.docutils.StringUtils"/>
        <replace file="src/com/aptana/ide/core/URLEncoder.java" token="logError(Messages.URLEncoder_Cannot_Encode_URL + url, e);" value="logError(&quot;URLEncoder Cannot Encode URL&quot; + url, e);"/>
		
		<!-- Debugging: why is this failing? -->
		<svn username="${svn.username}" password="${svn.password}" svnkit="true">
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/Messages.java" destPath="src/com/aptana/ide/core/ui/preferences/Messages.java" />
		</svn>
		<svn username="${svn.username}" password="${svn.password}" svnkit="true">
            <export srcUrl="${aptana.svn.core.url}/plugins/com.aptana.ide.core.ui/src/com/aptana/ide/core/ui/preferences/messages.properties" destPath="src/com/aptana/ide/core/ui/preferences/messages.properties" />
		</svn>

		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do during the compilation target <name>, after the compile   -->
	<!-- but before jaring.  Substitute "name" with the name of the compilation-->
	<!-- target, eg @dot                                                       -->
	<!-- Available parameters :                                                -->
	<!--   source.foldern : n = 1 ... N, the source folders                    -->
	<!--   target.folder  : where the results of the compilation go            -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.compile.name">
	</target>

	<target name="post.compile.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the compilation target <name>                       -->
	<!-- Substitute "name" with the name of the compilation target, eg @dot    -->
	<!-- Available parameters :                                                -->
	<!--   jar.location - the location of the compilation results              -->
	<!--   <name>.classpath : name = name of the compilation target. A         -->
	<!--                      reference to the classpath structure.            -->
	<!-- ===================================================================== -->
	<target name="post.name">
	</target>

	<target name="post.@dot">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="pre.gather.bin.parts">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.bin.parts                         -->
	<!-- Available parameters :                                                -->
	<!--   build.result.folder - folder containing the build results           -->
	<!--   target.folder - destination folder                                  -->
	<!-- ===================================================================== -->
	<target name="post.gather.bin.parts">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.sources                          -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.sources                           -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.sources">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target gather.logs                             -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target gather.logs                              -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="post.gather.logs">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the target clean                                   -->
	<!-- Available parameters :                                                -->
	<!--   destination.temp.folder - destination folder                        -->
	<!-- ===================================================================== -->
	<target name="pre.clean">
		<!-- Delete the manually exported files... -->
        <delete file="src/com/aptana/ide/core/licensing/ClientKey.java" />
        <delete file="src/com/aptana/ide/core/licensing/ILicenseKey.java" />
        <delete file="src/com/aptana/ide/core/licensing/LicenseKeyService.java" />
        <delete file="src/com/aptana/ide/core/licensing/ILicenseContributor.java" />
        <delete file="src/com/aptana/ide/professional/licensing/LicensingUtilities.java" />
        <delete file="src/com/aptana/ide/core/URLEncoder.java" />
        <delete file="src/com/aptana/ide/core/ui/preferences/ApplicationPreferences.java" />
        <delete file="src/com/aptana/ide/core/ui/preferences/Messages.java" />
        <delete file="src/com/aptana/ide/core/ui/preferences/messages.properties" />
        <delete file="src/com/aptana/ide/core/ui/preferences/IPreferenceConstants.java" />
        <delete file="lib/trialkey.jar" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the target clean                                    -->
	<!-- Available parameters :                                                -->
	<!--   plugin.destination - final destination of the build                 -->
	<!--   build.result.folder - results of the compilation                    -->
	<!--   temp.folder - temporary folder                                      -->
	<!-- ===================================================================== -->
	<target name="post.clean">
	</target>
</project>
