<h1>Developers Guide</h1>


This page shows how to effectively get up and running with the pydev code. <br/>

<h2>Getting the code</h2>

The first thing you probably want to do in order to code in pydev is <strong>getting its code</strong>. As pydev is an Eclipse plugin, 
the whole process will be explained based on the Eclipse infrastructure (this was written for the sdk version 3.4.1 with Subversive 0.7.6).<br/><br/>

<strong>Pre-requisites:</strong> Eclipse SDK 3.4.1, Subversive 0.7.6 and Java 5.0 (note that other versions of those should work too but details may differ a bit)<br/><br/>

Before getting the code, there's an important step you need to make: Change your java 'compiler compliance-level' to 5.0.
To do this, go to <strong>window > preferences > Java > compiler</strong> and change that setting from <strong>1.4 to 5.0</strong>.<br/><br/>

<h3>Getting the code</h3>

Go to the menu: <strong> File &gt; New &gt; Other </strong> and choose <strong>Projects from SVN</strong><br/><br/>

<br/><br/><center><img src="images/developers/pic1.png" border=1/></center><br/><br/>

<center>
<strong>Fill the needed info with </strong><br/>
<ul>
	repo: <strong>http://svn.aptana.com/svn/pydev/</strong><br>
	user: <strong>anonymous</strong><br>
	password: <strong>aptana</strong><br>
</ul>
</center>

<br/><br/><center><img src="images/developers/pic2.png" border=1/></center><br/><br/>

<center><strong>Append trunk to the path (to get the trunk) and press 'Finish'  </strong></center>

<br/><br/><center><img src="images/developers/pic2a.png" border=1/></center><br/><br/>

<center><strong>Select 'Find projects in the children of the selected resource'</strong></center>

<br/><br/><center><img src="images/developers/pic3.png" border=1/></center><br/><br/>

<center><strong>Check "Respect projects hierarchy" and choose the projects to download (only Mylyn is optional) and press 'Next'</strong></center><br>
<center>Note that it's important that when downloaded the internal hierarchy is kept -- with 3 top-folders:<br> 
plugins, builders and features (so that the build script can be used later)</center>

<br/><br/><center><img src="images/developers/pic4.png" border=1/></center><br/><br/>

<center><strong>Choose where to download it and press 'Finish'</strong></center><br>

<br/><br/><center><img src="images/developers/pic5.png" border=1/></center><br/><br/>


<h3>Configuring the environment after getting the code</h3>

<br/>

After you do that, you'll probably note that the tests did <strong>not compile successfully</strong>. This is because there are some settings
that will depend on your installation, and this settings are stored in a class that holds that info (which you'll have to create). 
There is a 'template' for that file in the svn at: 
<strong>org.python.pydev.core/tests/org.python.pydev.core/TestDependent.OS.template</strong>. You should create a copy of that file in that same dir named 
<strong>TestDependent.java</strong> and set the needed things according to your installation. If there is still something that does
not compile, it may mean that: <br/>
<ul>
	<li>There is something missing in that TestDependent.java file because it is not synched with all the dependencies (if so, just add the needed variable to it)</li>
	<li>The head does not compile in the svn -- if you believe that is the case, send an e-mail to the pydev-code list at sourceforge to know what's happening.</li>
</ul>
<br/>


<h2>Where to start?</h2>

Ok, this may be the most difficult thing... especially because answers may change a lot depending on what you want to do, so, below are 
outlined 2 different approaches: <br/><br/>

<ul>
	<li>Extending Pydev <strong>with Jython</strong>: recommended if you want to add some editor-related action or something that does not need implementing some Eclipse extension-point.</li>
	<li>Extending Pydev <strong>in Java</strong>: if you want something that won't map to an action, this might be the better way to go.</li>
</ul>

To start in any of those approaches it might be worth taking a look at some Eclipse documentation, to try to grasp some of its concepts. One of
the finest documentations for that is the <a href="http://wiki.eclipse.org/index.php/Eclipse_FAQs">Eclipse FAQ</a>.<br/><br/>

If you want to take the Jython approach, check out this article on how to do
<a href="http://fabioz.com/pydev/manual_articles_scripting.html">jython scripting in pydev</a><br/><br/>

And that's it. If you have further doubts about how to code in pydev, direct your questions to 
the <a href="http://lists.sourceforge.net/lists/listinfo/pydev-code">pydev-code list</a> at sourceforge.<br/><br/>


<h2>Creating a distribution locally</h2>


<h2>Contributing back</h2>

If you do some change at pydev that you want to contribute back to the main trunk, you should create a patch and attach it to a bug
in the sourceforge tracker with the title: <strong>[PATCH] description of the patch</strong><br/><br/>

<strong>Creating a patch</strong>: To create a patch, you should go to the package explorer, right-click the project you made 
changes to (if you changed more than one project, send a file with the changes to each project) and choose <strong>team > create patch</strong>.
You should then follow the steps provided by the wizard. The most important thing is that you choose the <strong>Unified</strong> diff output.<br/><br/>

<br/><br/><center><img src="images/developers/patch.png" border=1/></center><br/><br/>

<strong>NOTE 1</strong>: Diffs do not work well for binary files, so, if you made some change to some image, please attach the changed
image itself, pointing the complete location to the image when attaching it to the bug.<br/><br/>

<strong>NOTE 2</strong>: If you did some whole new script that uses the 'jython scripting in pydev' infrastructure, you do not need 
to create a patch. Just attach the script itself to the bug.<br/><br/>



