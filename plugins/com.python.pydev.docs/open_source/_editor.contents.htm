<h2>Pydev editor preferences</h2>

<center>

Note that the options should be self-explanatory, so, they're not detailed here, 
but if you don't understand one, please ask in the users forum (so that the spelling of the option is improved).
<br/><br/>

In <strong>window > preferences > pydev > editor</strong>, pydev can edit the tab settings and appearance colors used in pydev 
(such as the code color, decorators, numbers, strings, comments, etc).

<br/><br/>

It's important to have in mind that many preferences, 
such as print margin, show line number, background/foreground colors, etc. are inherited from 
the text-editor preferences at <strong>general > editors > text editors</strong>, and 
some other preferences are at <strong>general > appearance > colors and fonts</strong> -- 
-- there's a link for both at the end of the preferences page.
<br/><br/>


<p><img border="1" src="images/editor/editor_preferences.png"></p>

<br/><br/>
In code completion preferences, configure how you want the code-completion to work.
<br/><br/>

<p><img border="1" src="images/editor/code_completion_preferences.png"></p>

<br/><br/>
Code-folding: new editors will have it applied.
<br/><br/>

<p><img border="1" src="images/editor/code_folding_preferences.png"></p>

<br/><br/>
Code-style: Choose how you want the <strong>assign to variable quick assist assign</strong> to work (Ctrl+1): with camel case variables or
variables separated with underline (an example is shown when you change it).
<br/><br/>

<p><img border="1" src="images/editor/code_style_preferences.png"></p>


<br/><br/>
Block comments are comments formatted in a special way. An example of applying the block comment is shown
(2 types of block comments are available: a multi-line and a single line comment).
<br/><br/>

<p><img border="1" src="images/editor/block_comments_preferences.png"></p>

<br/><br/>
In the code-formatter preferences page, you can choose different ways of having your code formatted.
<br/><br/>
<p><img border="1" src="images/editor/code_formatter_preferences.png"></p>

<br/><br/>
With Ctrl+1 when over a function line, you can create the docstring automatically (and these preferences
are used to determine what's the result of doing so)
<br/><br/>
<p><img border="1" src="images/editor/docstring_preferences.png"></p>

<br/><br/>
The file types indicate which file extensions are recognized for the type inference engine (it's not an association
to the file editor)
<br/><br/>
<p><img border="1" src="images/editor/file_type_preferences.png"></p>

<br/><br/>
Ctrl+Shift+O can organize the available imports (when no selection is done -- if done over a selection it'll do a 
regular text sort over the selected text), and those preferences indicate how the available imports should be organized.
<br/><br/>
<p><img border="1" src="images/editor/import_preferences.png"></p>

<br/><br/>
What to show on the mouse hover?
<br/><br/>
<p><img border="1" src="images/editor/hover_preferences.png"></p>

<br/><br/>
Here you can enter new templates. There are 2 contexts, the "Editor" and the "New Module". The templates in the
"Editor" context are available for code-completion and the ones with "New Module" are available for the creation
of new modules. 
<br/><br/>
<p><img border="1" src="images/editor/template_preferences.png"></p>

<br/><br/>
The typing preferences indicate what should be automatically entered when you're typing text (e.g.: automatic parenthesis,
smart indent, etc).
<br/><br/>
<p><img border="1" src="images/editor/typing_preferences.png"></p>



</center>