Things to look when doing jython integration:

org.eclipse.jdt.internal.debug.ui.launcher.LocalJavaApplicationTabGroup
org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup
org.eclipse.jdt.launching.JavaLaunchDelegate
org.eclipse.ant.core.AntRunner
org.eclipse.ant.internal.ui.preferences.AntRuntimePreferencePage

jython module management (may be handy)
org.python.core.SysPackageManager


after 0.9.8.7

- Minor bug: if there was no other project to reference in the new project wizard, it appeared next even though
it didn't have a 'next' page.
- Debugger speed up (on par with the best debuggers available)
- Debugger now gets the variables 'on-demand'
- The variables returned for jython are much more complete
- Wizard to create new project has option for creating a default 'src' folder (and add it to the pythonpath).
- The create new python module and new python package have been reviewed (you can still use
the regular ones, but the new ones are really reccommended -- also it will help in making sure you have your pythonpath
correctly configured!).
- Create new source folder option added.

after 0.9.8.6

- Fixed debugger so that tracing does not appear
- Fixed jython shell (and extended it to get better information).
- Changed the interpreter configuration so that it is backwards-compatible from now on 
(but the current interpreters will be lost and will need to be configured)
- Breakpoints can have conditionals (this was contributed by Achim Nierbeck, and was actually provided in release 0.9.8.6,
but I forgot to put it in the release notes)


after 0.9.8.5

- Conditional breakpoint added (Achim Nierbeck)
- New python project (Mikko Ohtamaa)
- New python module (Mikko Ohtamaa)
- Python launch configuration tabs reworked (Mikko Ohtamaa)
- Some locking problems were fixed when doing code completion
- Faq has been extended with more doubts

after 0.9.8.3

- Saving information as deltas
- Option for not using smart-indent after opening brackets
- License changed
- Bugfixes



Begginers guide draft (from Jack Trainor - given in the blog)

* Unzip eclipse-SDK-3.1.1-win32.zip to c:\
* Unzip org.python.pydev.feature-0_9_8_3.zip to c:\
* Double-click c:\eclipse\eclipse.exe
* Set default workspace where you want it.
* Close Welcome splash pane.
* Select Resource perspective: Window\Open Perspective\Other...\Select Perspective\Resource.
* Click OK.
* Select Window\Preferences\PyDev\Interpreter - Python.
* Click top New... button and enter Python path, e.g., c:\Python24\python.exe
* Click OK.
* Click File\New\Project...
* Select Simple\Project Wizard
* Click Next.
* Enter Project Name, e.g. SimpleProj1.
* Click Finish.
* Click File\New...\File.
* Enter File Name, e.g. Py1.py.
* Click Finish.
* Right-click SimpleProj1 in Navigator pane and select Properties.
* Click PyDev-PYTHONPATH.
* Click top pane "Add source folder" button.
* /SimpleProj1 should already be selected. Click OK.
* Click top pane "Add source folder" button.
* Add path to source folder on disk, e.g., C:\Dev\eclipse\SimpleProj1.
* Click OK.
* Add some Python code to Py1.py:
print 'Hello from eclipse and python."
* Save.
* Right-click on Py1.py in Navigator pane.
* Select Run as\Python run.
* A console window should appear showing output from the Python program.

I think the problem I experienced resulted from my closing all the eclipse windows and working from a bare desktop when I started. I thought that would make things simpler; apparently not so.

Anyway, thanks for your work in putting Python on Eclipse.


after 0.9.8.2

- Debugger was improved to be faster (more info about it <a href="http://pydev.blogspot.com/2005/10/high-speed-debugger.html"> at my blog</a>).
- Add watch added to the editor popup menu
- Added syntax highlighting to the 'self' token
- Code folding added for 'glued' imports
- Fixed some outline problems
- Debugger does not try to get breakpoints on closed projects anymore
- Some refreshing issues regarding the outline and colors when reusing the editor were fixed
- Code completion for relative imports has changed a lot (there were some pretty hard-to-find bugs in this area...)
- Some move imports problems fixed
- The auto-add '(self):' now works with tabs too

after 0.9.8.1

- Dedent also added
- Options for doing parsing only when saving the document (check the builder preferences)
- Options for doing parsing only after an elapsed time (check the builder preferences)
- .pyc is removed when the corresponding .py file is removed.
- debugger has been changed so that it becomes faster (still not as fast as I would like, but still... faster)
- other bug-fixes (as ususal)
- some creation assists have been removed until they are improved (so, Ctrl+1 now is pretty stable for all of its uses)
  and the structure has been changed to enable extensions
- Some escaped quotes problems fixed when formatting code
- Navigation with Ctrl+Shift+ (up or down) has been slightly improved, so that it goes to the start or the end of the file

after 0.9.8

- Gerhard Kalab contributed patch to:
	- enable bold and italic style for syntax coloring
	- added parse rule and color/style for string representation (backquotes)
- java 1.4 support reintroduced
- zombie process after exiting eclipse reviewed
- paths with '.' are accepted for the pythonpath (unless they start with a '.', because it may not accept relative paths).
- relative imports are added to code-completion
- local imports are taken into consideration when doing code completion
- debugger has 'change support', so, changed variables in a scope appear red


after 0.9.7.99

- jython integration supports spaces for jython.jar and java install
- jython debugger support has been added
- jython code-completion support for new style objects (jython 2.2a1) has been enhanced.
- many templates were added
- the grammar evolved a lot (and will probably be re-used by the jython guys), 
so, now you can actually use decorators (not in a hackish way as previously),
list comprehension on method calls and tuples and the new from xxx import (a,b,c) syntax.
- pylint supports spaces
- pylint is no longer distributed with pydev (its location must be specified)
- some problems with the shells used for code-completion should be fixed


done in 0.9.7.99
- Code completion has been improved for supporting wild imports and relative imports better (sometimes it had some problems).
- There are hovers for the text and annotations (when you pass the mouse through an error it will show its description).
- Block comment (Ctrl+4) now uses the size defined for the print margin.
- New block-comment style added (Ctrl+Shift+4).
- The debugger had many fixes (altough it is still not perfect). Thanks to Aleks Totic, Scott Schlesier and Vitor Oba for the patches!
- Jython has its first shot at PyDev, you should be able to use many things already, meaning: all the common editor features and code completion.
- New icons were created.
- Many other bug-fixes as usual.














what I want:

- simple "text completion" for locals without found definitions:
e.g. 
c.bla = 1
c.foo = 2
c. | triggers completion with bla,foo

- code completion with self variables should be an union of all found occurences (right now, it finds the
first and gets completions based on it, so, some strange behaviours can happen... e.g.: if the first occurence
found maps to None, even if some other value finds the correct class, it is ignored. What we should have is
the union between the completions from None and the other class).

- imports in local scope should be gotten
- pythonpath should be the same for project and lauch
- IPython should be integrated
- code completion: support zip imports
- code completion: reference to update completions for other project. Some kind of 'broadcast' could be used for these changes.
- code completion: some thread could check for completions from time to time to make sure they're up-to-date (check timestamp)/changes in structure.
- code completion: ClassC().| should bring suggestions for class 'ClassC'



After 0.9.3

- Integrated Scott Schleiser patches for the debugger (you won't see any 'implement me' anymore!).
- Integrated Heikki Toivonen patch for PyLint using the project pythonpath (only tested on windows). Please, keep an eye for errors and report them.
- Integrated Heikki Toivonen patch for indentation after '(', '[' and '{' (if the line ends with a comma).
- Some StackOverflow errors were removed from code completion.
- Keybindings added for Refactoring (powered by bycicle repair man) - check the <a href="faq.html">FAQ</a>.
- If your python executable is in the path, its complete path is found.    






Bug:
PyLint does not work if we have spaces in the path

After 0.9.1

- Integrated Scott Schleiser's editor patch (now on apply, it really applies new settings, without having to close the editor).
- Integrated Scott Schleiser's debugger patch - most 'implement me' and 'volunteers needed' were fixed.
- Code Formatting bugs solved (and unit-tests added).
- Code completion had unit-tests added and some minor bugs solved.
- New Content Assistants added. 
- Docstrings in national encodings should work now.
- from scbr import a, b... should work now.
- Decorators now can have custom colors.
- Numbers now can have custom colors.
- Matching brackets now highlighted.
- Minor bugs in other areas. 




Done in 0.9.1

Content assistant improvements:
- assign content assistant when assigned to variable strips the "get";
- move imports content assistant should be improved to move import closer to existant import and
not to top of file;
- Icons added to them;

Others:
- Ctrl+Shift+O: if no selection: Organizes all global imports from the file (sorts alphabetically);
- Ctrl+Shift+O: if some line selection: sorts alphabetically the lines selected;
- Ctrl+Shift+F: if no selection: Formats all code;
- Ctrl+Shift+F: if some line selection: Formats selected code;
- PyLint only blocks interface on "update results";
- the namespace in debug mode is not polluted anymore (Scott Schleiser provided the patch);
- The PYTHONPATH used for debug now should be the same used in run.
- Editor preferences

Code Completion:
- get parameters in code completion;
- builtins like ' ', {}, [] should bring correct suggestions;
- relative imports;
- other bug-fixes;














org.python.pydev

Since 0.3

New features:

- Added team file extensions for .py & .pyc
- Added "Source" menu to the editor: comment/goto methods implemented by fabioz
- Added Python nature, and nature icon. Nature get automatically added to any project
that opens a python editor.
- Added Python properties to projects that have Python nature
- Editor now has a python icon. Icon is ugly, help!
- .pyc files are filtered out in the resource view
- Parsing now happens either immediately on return, or a second after input
This makes error notifications nicer and more predictable
- New double-clicking strategy, copied from Java
- Moved debug preferences into main plugin. We need them for import paths parsing
- Hyperlinks on simple imports now work. For them to find system includes, you'll need to
set up the python interpreter in the preferences.
	active hyperlinks are:
		[imports] import sys: you can click on sys, and sys.py will open
		[local function calls]: functions defined in the same file
		[class constructors]: a = SomeClass() takes you to class definition
		[self.method calls]: self.method_name works if method is defined in the same file
- When you are editing in the tab mode, paste will replace spaces with tabs
- tabs/spaces conversion only takes place inside code, not inside comments
- IDLE like colors for text

Bug fixes:
- Moved parsing so that all pydev parsers use single thread
-








