Index: ICompilerAPI.java
===================================================================
RCS file: ICompilerAPI.java
diff -N ICompilerAPI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ ICompilerAPI.java	30 Jul 2003 00:00:42 -0000
@@ -0,0 +1,28 @@
+/*
+ * Author: atotic
+ * Created: Jul 29, 2003
+ */
+package org.python.parser;
+
+/**
+ * callbacks from the parser to the compiler
+ *
+ * org.totic.pydev needed to use org.python.parser outside of the the jython tree
+ * and this class abstracts all calls from parser to the compiler
+ */
+
+public interface ICompilerAPI {
+
+	public Object newLong(String s);
+
+	public Object newLong(java.math.BigInteger i);
+
+	public Object newFloat(double v);
+	
+	public Object newImaginary(double v);
+	
+	public Object newInteger(int i);
+	
+	public String decode_UnicodeEscape(String str, int start, int end,
+		String errors, boolean unicode);
+}
Index: PyCompilerAPI.java
===================================================================
RCS file: PyCompilerAPI.java
diff -N PyCompilerAPI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ PyCompilerAPI.java	30 Jul 2003 00:00:42 -0000
@@ -0,0 +1,42 @@
+/*
+ * Author: atotic
+ * Created: Jul 29, 2003
+ * License: Common Public License v1.0
+ */
+package org.python.parser;
+
+import org.python.core.Py;
+import org.python.core.PyString;
+import java.math.BigInteger;
+
+/**
+ * Python core implementation of compiler API
+ */
+public class PyCompilerAPI implements ICompilerAPI {
+
+	public Object newLong(String s) {
+		return Py.newLong(s);
+	}
+
+	public Object newLong(BigInteger i) {
+		return Py.newLong(i);
+	}
+
+	public Object newFloat(double v) {
+		return Py.newFloat(v);
+	}
+
+	public Object newImaginary(double v) {
+		return Py.newImaginary(v);
+	}
+
+	public Object newInteger(int i) {
+		return Py.newInteger(i);
+	}
+
+	public String decode_UnicodeEscape(
+		String str, int start, int end, String errors, boolean unicode) {
+			return PyString.decode_UnicodeEscape(str, start, end, errors, unicode);
+	}
+
+}
Index: PythonGrammar.java
===================================================================
RCS file: /cvsroot/jython/jython/org/python/parser/PythonGrammar.java,v
retrieving revision 2.20
diff -u -r2.20 PythonGrammar.java
--- PythonGrammar.java	18 May 2003 22:30:17 -0000	2.20
+++ PythonGrammar.java	30 Jul 2003 00:00:44 -0000
@@ -1,11 +1,16 @@
 /* Generated By:JJTree&JavaCC: Do not edit this line. PythonGrammar.java */
 package org.python.parser;
-import org.python.core.Py;
-import org.python.core.PyString;
 import org.python.parser.ast.modType;
 
 public class PythonGrammar/*@bgen(jjtree)*/implements PythonGrammarTreeConstants, PythonGrammarConstants {/*@bgen(jjtree)*/
-  protected JJTPythonGrammarState jjtree = new JJTPythonGrammarState();void jjtreeOpenNodeScope(Node n) {
+  protected JJTPythonGrammarState jjtree = new JJTPythonGrammarState();public ICompilerAPI compilerAPI;
+
+
+    public void setCompilerAPI(ICompilerAPI compilerAPI) {
+        this.compilerAPI = compilerAPI;
+    }
+
+    void jjtreeOpenNodeScope(Node n) {
         Token t = getToken(1);
         jjtree.pushNodePos(t.beginLine, t.beginColumn);
     }
@@ -17,34 +22,34 @@
     Object makeInt(String s, int radix) {
         if (s.endsWith("L") || s.endsWith("l")) {
             s = s.substring(0, s.length()-1);
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
         int ndigits = s.length();
         int i=0;
         while (i < ndigits && s.charAt(i) == '0')
             i++;
         if ((ndigits - i) > 11) {
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
 
         long l = Long.valueOf(s, radix).longValue();
         if (l > 0xffffffffl || (radix == 10 && l > Integer.MAX_VALUE)) {
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
-        return Py.newInteger((int) l);
+        return compilerAPI.newInteger((int) l);
     }
 
     Object makeFloat(String s) {
-        return Py.newFloat(Double.valueOf(s).doubleValue());
+        return compilerAPI.newFloat(Double.valueOf(s).doubleValue());
     }
 
     Object makeLong(String s) {
-        return new org.python.core.PyLong(s);
+        return compilerAPI.newLong(s);
     }
 
     Object makeComplex(String s) {
         s = s.substring(0, s.length() - 1);
-        return Py.newImaginary(Double.valueOf(s).doubleValue());
+        return compilerAPI.newImaginary(Double.valueOf(s).doubleValue());
     }
 
     String makeString(String s, int quotes) {
@@ -66,7 +71,7 @@
             int i=quotes+start;
             int last_i=i;
 
-            return PyString.decode_UnicodeEscape(s, i, n, "strict", ustring);
+            return compilerAPI.decode_UnicodeEscape(s, i, n, "strict", ustring);
         }
     }
 
Index: SimpleNode.java
===================================================================
RCS file: /cvsroot/jython/jython/org/python/parser/SimpleNode.java,v
retrieving revision 2.20
diff -u -r2.20 SimpleNode.java
--- SimpleNode.java	30 May 2002 21:14:48 -0000	2.20
+++ SimpleNode.java	30 Jul 2003 00:00:44 -0000
@@ -1,7 +1,6 @@
 // Copyright (c) Corporation for National Research Initiatives
 package org.python.parser;
 
-import org.python.core.PyObject;
 import org.python.parser.ast.*;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -182,7 +181,7 @@
         ostream.writeBoolean(b);
     }
 
-    protected void pickleThis(PyObject n, DataOutputStream ostream)
+    protected void pickleThis(Object n, DataOutputStream ostream)
         throws IOException
     {
         String s = n.toString();
Index: python.jjt
===================================================================
RCS file: /cvsroot/jython/jython/org/python/parser/python.jjt,v
retrieving revision 2.22
diff -u -r2.22 python.jjt
--- python.jjt	18 May 2003 22:30:17 -0000	2.22
+++ python.jjt	30 Jul 2003 00:00:44 -0000
@@ -18,12 +18,17 @@
 
 PARSER_BEGIN(PythonGrammar)
 package org.python.parser;
-import org.python.core.Py;
-import org.python.core.PyString;
 import org.python.parser.ast.modType;
 
 public class PythonGrammar 
 {
+    public ICompilerAPI compilerAPI;
+    
+    
+    public void setCompilerAPI(ICompilerAPI compilerAPI) {
+        this.compilerAPI = compilerAPI;
+    }
+    
     void jjtreeOpenNodeScope(Node n) {
         Token t = getToken(1);
         jjtree.pushNodePos(t.beginLine, t.beginColumn);
@@ -36,34 +41,34 @@
     Object makeInt(String s, int radix) {
         if (s.endsWith("L") || s.endsWith("l")) {
             s = s.substring(0, s.length()-1);
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
         int ndigits = s.length();
         int i=0;
         while (i < ndigits && s.charAt(i) == '0')
             i++;
         if ((ndigits - i) > 11) {
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
 
         long l = Long.valueOf(s, radix).longValue();
         if (l > 0xffffffffl || (radix == 10 && l > Integer.MAX_VALUE)) {
-            return Py.newLong(new java.math.BigInteger(s, radix));
+            return compilerAPI.newLong(new java.math.BigInteger(s, radix));
         }
-        return Py.newInteger((int) l);
+        return compilerAPI.newInteger((int) l);
     }
 
     Object makeFloat(String s) {
-        return Py.newFloat(Double.valueOf(s).doubleValue());
+        return compilerAPI.newFloat(Double.valueOf(s).doubleValue());
     }
 
     Object makeLong(String s) {
-        return new org.python.core.PyLong(s);
+        return compilerAPI.newLong(s);
     }
 
     Object makeComplex(String s) {
         s = s.substring(0, s.length() - 1);
-        return Py.newImaginary(Double.valueOf(s).doubleValue());
+        return compilerAPI.newImaginary(Double.valueOf(s).doubleValue());
     }
 
     String makeString(String s, int quotes) {
@@ -85,7 +90,7 @@
             int i=quotes+start;
             int last_i=i;
 
-            return PyString.decode_UnicodeEscape(s, i, n, "strict", ustring);
+            return compilerAPI.decode_UnicodeEscape(s, i, n, "strict", ustring);
         }
     }
 
Index: ast/Num.java
===================================================================
RCS file: /cvsroot/jython/jython/org/python/parser/ast/Num.java,v
retrieving revision 1.1
diff -u -r1.1 Num.java
--- ast/Num.java	30 May 2002 16:04:39 -0000	1.1
+++ ast/Num.java	30 Jul 2003 00:00:51 -0000
@@ -5,13 +5,13 @@
 import java.io.IOException;
 
 public class Num extends exprType {
-    public org.python.core.PyObject n;
+    public Object n;
 
-    public Num(org.python.core.PyObject n) {
+    public Num(Object n) {
         this.n = n;
     }
 
-    public Num(org.python.core.PyObject n, SimpleNode parent) {
+    public Num(Object n, SimpleNode parent) {
         this(n);
         this.beginLine = parent.beginLine;
         this.beginColumn = parent.beginColumn;
