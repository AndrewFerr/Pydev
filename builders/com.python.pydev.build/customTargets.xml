<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml" />
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml" />

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
        <echo message="Replacing feature and plugin versions to be: ${version.full}" />
		<!-- Copied from old releng customTargets.xml -->
		<replaceregexp match="Bundle-Version:(.*)" replace="Bundle-Version: ${version.full}" byline="true">
			<fileset dir="${buildDirectory}" includes="plugins/**/META-INF/MANIFEST.MF" />
		</replaceregexp>

		<replaceregexp file="${buildDirectory}\features\com.python.pydev.extensions\feature.xml" match='version="(.*)"' replace='version="${version.full}"' byline="true" />
		<replaceregexp file="${buildDirectory}\plugins\com.python.pydev\src\com\python\pydev\PydevPlugin.java" match='public static final String version =(.*)"' replace='public static final String version ="${version.full}"' byline="true" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
        <!-- Set up retroweaver to run on the jar's contents -->
        <property name="jar1" value="${buildDirectory}/plugins/com.python.pydev.analysis/analysis"/>
        <property name="jar2" value="${buildDirectory}/plugins/com.python.pydev.fastparser/fastparser"/>
        <property name="jar3" value="${buildDirectory}/plugins/com.python.pydev.codecompletion/codecompletion"/>
        <property name="jar4" value="${buildDirectory}/plugins/com.python.pydev/pydev"/>
        <property name="jar5" value="${buildDirectory}/plugins/com.python.pydev.debug/debug"/>
        <property name="jar6" value="${buildDirectory}/plugins/com.python.pydev.refactoring/refactoring"/>
        <delete dir="${jar1}" />
        <delete dir="${jar2}" />
        <delete dir="${jar3}" />
        <delete dir="${jar4}" />
        <delete dir="${jar5}" />
        <delete dir="${jar6}" />
        <echo message="Unzipping JARs" />
        <unzip src="${jar1}.jar" dest="${jar1}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <unzip src="${jar2}.jar" dest="${jar2}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <unzip src="${jar3}.jar" dest="${jar3}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <unzip src="${jar4}.jar" dest="${jar4}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <unzip src="${jar5}.jar" dest="${jar5}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <unzip src="${jar6}.jar" dest="${jar6}/out"><patternset><include name="**/*.*" /></patternset></unzip>
        <echo message="Running retroweaver on JAR contents" />
        <retroweaver srcdir="${jar1}/out" verbose="false" destdir="${jar1}/out" version="1.4" />
        <retroweaver srcdir="${jar2}/out" verbose="false" destdir="${jar2}/out" version="1.4" />
        <retroweaver srcdir="${jar3}/out" verbose="false" destdir="${jar3}/out" version="1.4" />
        <retroweaver srcdir="${jar4}/out" verbose="false" destdir="${jar4}/out" version="1.4" />
        <retroweaver srcdir="${jar5}/out" verbose="false" destdir="${jar5}/out" version="1.4" />
        <retroweaver srcdir="${jar6}/out" verbose="false" destdir="${jar6}/out" version="1.4" />
        <echo message="Deleting original JARs" />
        <delete file="${jar1}.jar" />
        <delete file="${jar2}.jar" />
        <delete file="${jar3}.jar" />
        <delete file="${jar4}.jar" />
        <delete file="${jar5}.jar" />
        <delete file="${jar6}.jar" />
        <echo message="Re-creating JARs with retroweaved binaries" />
        <jar jarfile="${jar1}.jar" basedir="${jar1}/out" update="true" manifest="${jar1}/out/META-INF/MANIFEST.MF" />
        <jar jarfile="${jar2}.jar" basedir="${jar2}/out" update="true" manifest="${jar2}/out/META-INF/MANIFEST.MF" />
        <jar jarfile="${jar3}.jar" basedir="${jar3}/out" update="true" manifest="${jar3}/out/META-INF/MANIFEST.MF" />
        <jar jarfile="${jar4}.jar" basedir="${jar4}/out" update="true" manifest="${jar4}/out/META-INF/MANIFEST.MF" />
        <jar jarfile="${jar5}.jar" basedir="${jar5}/out" update="true" manifest="${jar5}/out/META-INF/MANIFEST.MF" />
        <jar jarfile="${jar6}.jar" basedir="${jar6}/out" update="true" manifest="${jar6}/out/META-INF/MANIFEST.MF" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="updateSite" />
		<antcall target="publish" />
	</target>

	<target name="updateSite">
		<copy file="${builder}/site.xml" tofile="${p2.repo.dir}/site.xml" />
		<replace token="{version.full}" value="${version.full}" file="${p2.repo.dir}/site.xml" />
		<zip destfile="${buildDirectory}/${topLevelElementId}-${version.full}.zip">
			<fileset dir="${p2.repo.dir}" defaultexcludes="false" />
		</zip>
		<move file="${buildDirectory}/${topLevelElementId}-${version.full}.zip" todir="${p2.repo.dir}" />
		<copy file="${builder}/index.html" tofile="${p2.repo.dir}/index.html" />
		<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${p2.repo.dir}/index.html" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<copy todir="${deploy.dir}" failonerror="true">
			<fileset dir="${p2.repo.dir}" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
